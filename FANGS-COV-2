/**
Vassar Cognitive Science - Novel Behavior Lab


*/

#include <stdlib.h> //import for min, max, etc.
#include <stdbool.h> //import for boolean support

//set pin address for hardware
#define RIGHT_IR_PIN 0 //sensors
#define LEFT_IR_PIN 1
#define RIGHT_PHOTO_PIN 2 
#define LEFT_PHOTO_PIN 3
#define FRONT_BUMP_PIN 4
#define BACK_BUMP_PIN 5

#define RIGHT_MOTOR_PIN 0 // motors
#define LEFT_MOTOR_PIN 2

//*************************************************** Variable Definitions ****************************************************//

//global variables to store all current sensor values accessible to all functions and updated by the "read_sensors" function
int right_ir_value, left_ir_value, right_photo_value, left_photo_value, front_bump_value, back_bump_value; 

// PARAMETERS AND THRESHOLD
int avoid_threshold = 300;
int green_sensitivity = 4000;
int red_sensitivity = 4000;
int photo_threshold = 80;		//the sum of photo sensor readings has to be below this for light states

//timer
int timer_duration = 500;		//the time in milliseconds to wait between calling action commands.  This value is changed by each drive command called by actions
unsigned long start_time = 0;	//store the system time each time we start an action so we can see if our time has elapsed without a blocking delay
static int time = 0;

//PHASES
int time_hunger = 500;
int time_scan = 1000;
int time_dance = 1200;

//***************************************************Function Declarations**************************************************//

//SENSORS READING
void read_sensors(); //function to read all sensor values and save to global vars
void read_sensors(){
	right_ir_value = analog_et(RIGHT_IR_PIN);				//read the range sensor at the RIGHT_IR_PIN
	left_ir_value = analog_et(LEFT_IR_PIN);					//read the range sensor at the LEFT_IR_PIN
	right_photo_value = analog_et(RIGHT_PHOTO_PIN);		//read the photo sensor at the RIGHT_PHOTO_PIN
	left_photo_value = analog_et(LEFT_PHOTO_PIN); 		//read the photo sensor at the LEFT_PHOTO_PIN
	int front_bump_sensor_value = analog10(FRONT_BUMP_PIN); 		//read the sensor at FRONT_BUMP_PIN
	int back_bump_sensor_value = analog10(BACK_BUMP_PIN);			//read the sensor at BACK_BUMP_PIN
	if(front_bump_sensor_value < 400){
		front_bump_value = front_bump_sensor_value; 
	}	
	if(back_bump_sensor_value < 400){
		back_bump_value = back_bump_sensor_value;
	}
}

//CHECKS
bool is_above_distance_threshold(); //return true if one and only one range sensor is above the specified threshold
bool is_above_distance_threshold(){
	return (left_ir_value > avoid_threshold || right_ir_value > avoid_threshold);  //returns true if one (exclusive) ir value is above the threshold, otherwise returns false
}

bool is_front_bump();	//return true if the front bumper was hit
bool is_front_bump(){
	return (front_bump_value <= 400);	 //return true if our bump value is less than or equal to 400
}

bool is_back_bump();	//return true if the back bumper was hit
bool is_back_bump(){
	return (back_bump_value <= 400);  //return true if our bump value is less than or equal to 400
}

bool is_green();
bool is_green(){
	int green_area = get_object_area(0,0);
	return (green_area > green_sensitivity);
}

bool is_red();
bool is_red(){
	int red_area = get_object_area(1,0);
	return (red_area > red_sensitivity);
}

bool timer_elapsed();	//return true if our timer has elapsed
bool timer_elapsed(){
	return (systime() > (start_time + timer_duration)); //return true if the current time is greater than our start time plus timer duration
}

//state
void state_light();
void state_dark();
void state_hunger();
void state_scan();

//ACTIONS
void escape_front();
void escape_back();
void avoid();
void cruise_straight();
void cruise_straight_hunger();
void cruise_zigzag();
void stop();
void dance();
void approach_green();
void avoid_red();
void approach_red();

//HELPER FUNCTIONS
float map(float value, float start_range_low, float start_range_high, float target_range_low, float target_range_high); //remap a value from a source range to a new range
float map(float value, float start_range_low, float start_range_high, float target_range_low, float target_range_high){
	return target_range_low + ((value - start_range_low)/(start_range_high - start_range_low)) * (target_range_high - target_range_low);
}

//MOTOR CONTROL
void drive(float left, float right, float delay_seconds); //drive with a certain motor speed for a number of seconds
void drive(float left, float right, float delay_seconds){
	//850 is full motor speed clockwise, 1050 is stopped,  1250 is full motor speed counterclockwise
	//servo is stopped from ~1044 to 1055
	float left_speed = map(left, -1.0, 1.0, 850.0, 1250.0); //call the map function to map our speed (set between -1 and 1) to the appropriate range of motor values
	float right_speed = map(right, -1.0, 1.0, 1250.0, 850.0);
	
	timer_duration = (int)(delay_seconds * 1000.0); //multiply our desired time in seconds by 1000 to get milliseconds and update this global variable
	start_time = systime(); //update our start time to reflect the time we start driving (in ms)
	front_bump_value = 1000; //reset our sticky bumper values so we start this cycle as if we have not hit anything (hits read out <400)
	back_bump_value = 1000; 
	
	set_servo_position(LEFT_MOTOR_PIN, left_speed); //set the servos to run at the mapped speed
	set_servo_position(RIGHT_MOTOR_PIN, right_speed);
}

//================================================================================================================//
//=======================================================MAIN=====================================================//
//================================================================================================================//
 
int main()
{	
	camera_open(HIGH_RES);
	
	front_bump_value = 1000;
	back_bump_value = 1000;
	
	enable_servo(LEFT_MOTOR_PIN);	//initialize both motors and set speed to zero
	enable_servo(RIGHT_MOTOR_PIN);
	
	drive(0.0,0.0,1.0);
	
	while(true){
		camera_update();
		read_sensors(); //read all sensors and set global variables of their readouts	
		
		int photo_sum = left_photo_value + right_photo_value; // the sum of photo sensor readings
		//printf("Photo_sum: %i \n", photo_sum);
		time++;
		//printf("Time: %i \n", time);
		
		if(timer_elapsed()){ //any time a drive message is called, the timer is updated.  Until it is called again this should always return true
			if(time < time_hunger){	
				if(photo_sum < photo_threshold){
					state_light();
				}
				else{
					state_dark();
				}
			}	
			else if(time >= time_hunger && time < time_scan){
				state_hunger();
			}	
			else{
				state_scan();
			}
		}
	}
	return 0; 
}

//================================================================================================================//
//========================================================STATES==================================================//
//================================================================================================================//

void state_light(){
// hierarchy:  escape front, escape back, avoid red, approach blue, cruise straight
	//printf("LIGHT \n");
	if(is_front_bump()){
		escape_front();
	}
	else if(is_back_bump()){
		escape_back();
	}
	else if(is_red()){
		avoid_red();
	}
	else if(is_green()){
		approach_green();
	}
	else if(is_above_distance_threshold()){
		avoid();
	}
	else{
		cruise_straight();
	}		
}

void state_dark(){
// hierarchy:  escape front, escape back, avoid, cruise zigzag
	//printf("DARK \n");
	if(is_front_bump()){
		escape_front();
	}
	else if(is_back_bump()){
		escape_back();
	}
	else if(is_above_distance_threshold()){
		avoid();
	}
	else{
		cruise_zigzag();
	}
}

void state_hunger(){
	printf("I AM HUNGRY I NEED TO EAT \n");
	if(is_front_bump()){
		escape_front();
	}
	else if(is_back_bump()){
		escape_back();
	}
	else if(is_green()){
		approach_green();
	}
	else if(is_red()){
		approach_red();
	}
	else if(is_above_distance_threshold()){
		avoid();
	}
	else{
		cruise_straight_hunger();
	}
}

void state_scan(){
	//printf("SCAN \n");
	drive(0.0, 0.5, 0.5);
	if(is_red() || is_green()){
		time = time_hunger;
	}
	else if(time > time_dance){
		dance();
		//printf("DANCE TIME \n");
	}
}
				
//================================================================================================================//
//========================================================ACTION==================================================//
//================================================================================================================//

void escape_front(){
	float bump_midpoint = 250.0;
	float bump_max = 400.0;
	//printf("Escape Front \n");
	
	if(front_bump_value < bump_midpoint){
		float backup_time = map((float)front_bump_value, 0.0, bump_midpoint, 0.3, 0.75); //spend more time backing up with an arc as we hit closer to the center
		drive(-0.1, -0.90, backup_time);
	}
	else if(front_bump_value >= bump_midpoint){
		float backup_time = map((float)front_bump_value, bump_midpoint, bump_max, 0.75, 0.3); //spend more time backing up with an arc as we hit closer to the center
		drive(-0.90, -0.0, backup_time);
	}
}

void escape_back(){
	float bump_midpoint = 250.0;
	float bump_max = 400.0;
	//printf("Escape back \n");
	
	if(back_bump_value < bump_midpoint){
		float backup_time = map((float)back_bump_value, 0.0, bump_midpoint, 0.3, 0.75); //spend more time backing up with an arc as we hit closer to the center
		drive(0.9, 0.10, backup_time);
	}
	else if(back_bump_value >= bump_midpoint){
		float backup_time = map((float)back_bump_value, bump_midpoint, bump_max, 0.75, 0.3); //spend more time backing up with an arc as we hit closer to the center
		drive(0.10, 0.9, backup_time);
	}
}

void avoid(){
	//printf("Avoid \n");
	
	if(left_ir_value > avoid_threshold){
		drive(0.5, -0.5, 0.1);
	}
	
	else if(right_ir_value > avoid_threshold){
		drive(-0.5, 0.5, 0.1);
	}
}

void cruise_straight(){
	//printf("Straight \n");
	drive(0.5, 0.5, 0.5);
}

void cruise_straight_hunger(){
	//printf("Straight hunger \n");
	drive(0.8, 0.8, 0.1);
}

void cruise_zigzag(){
	//printf("Zigzag \n");
	drive(0.25, 0.8, 0.2);
	msleep(1000);
	drive(0.4, 0.25, 0.2);
	msleep(1000);
}

void stop(){
	//printf("Stop \n");
	drive(0.0, 0.0, 0.25);
}

void dance(){
	//printf("Dance \n");
	drive(0.0, 1.0, 1.2);
	msleep(1000);
	drive(0.6, 0.0, 1.2);
	msleep(1000);	
}

void approach_green(){
	int center_green = get_object_center(0,0).x;
	int center_camera = 0.5 * get_camera_width();
	int green_area = get_object_area(0,0);
	//printf("Approach Green, %i \n", green_area);
	
	if(center_green > (center_camera + 8)){
		drive(0.5, 0, 0.05);
	}	
	else if(center_green < (center_camera - 8)){
		drive(0, 0.5, 0.05);
	}
	else{
		drive(0.8, 0.8, 0.5);
	}
}

void avoid_red(){
	int center_red = get_object_center(1,0).x;
	int center_camera = 0.5 * get_camera_width();
	int red_area = get_object_area(1,0);
	//printf("Avoid Red, %i \n", red_area);
	
	if(center_red > center_camera){
		drive(0, 0.75, 0.1);
	}	
	else if(center_red <= center_camera){
		drive(0.75, 0, 0.1);
	}
	else{
		drive(0.5, 0.5, 0.5);
	}
}

void approach_red(){
	int center_red = get_object_center(1,0).x;
	int center_camera = 0.5 * get_camera_width();
	int red_area = get_object_area(1,0);
	//printf("Approach Red, %i \n", red_area);
	
	if(center_red > (center_camera + 8)){
		drive(0.5, 0, 0.05);
	}	
	else if(center_red < (center_camera - 8)){
		drive(0, 0.5, 0.05);
	}
	else{
		drive(0.8, 0.8, 0.5);
	}
}

